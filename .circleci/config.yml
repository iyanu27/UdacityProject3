version: 2.1

commands:
         
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
              - frontend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            cd frontend
            rm -rf node_modules/
            npm install
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
              - project/frontend/node_modules
              - project/frontend/dist
      - save_cache:
          paths:
              - frontend/node_modules
              - frontend/dist
          key: frontend-build-${CIRCLE_WORKFLOW_ID}
  # Section 2 - Build Phase forum here:
  #     https://knowledge.udacity.com/questions/419574
  #     https://github.com/jmcgui05/cicd/blob/master/.circleci/config.yml#L70
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
              - backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             rm -rf node_modules/
             npm install
             npm run build
      - persist_to_workspace:
          root: ~/
          paths:
              - project/backend/node_modules
              - project/backend/dist
      - save_cache:
          paths:
              - backend/node_modules
              - backend/dist
          key: backend-build-${CIRCLE_WORKFLOW_ID}

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
              - frontend-build-${CIRCLE_WORKFLOW_ID}
      - attach_workspace:
          at: ~/
      # Your job code here
      - run:
          name: Test front end
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
              - backend-build-${CIRCLE_WORKFLOW_ID}
      - attach_workspace:
          at: ~/
      # Your job code here
      - run:
          name: Test back end
          command: |
            cd backend
            npm install
            npm run test
  # Accidentally jumped ahead and missed error :/
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
              - frontend-build-${CIRCLE_WORKFLOW_ID}
      - attach_workspace:
          at: ~/
      # Your job code here
      - run:
          name: Run audit - frontend
          command: |
            cd frontend
            npm update
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
              - backend-build-${CIRCLE_WORKFLOW_ID}
      - attach_workspace:
          at: ~/
      # Your job code here
      - run:
          name: Run audit - backend
          # npm install -g npm is to fix audit package error
          command: |
            cd backend
            npm update
            # Going to cause this to fail intentionally by removing "fix"
            npm audit --audit-level=critical
            # Add "fix" to fix the issue
            #npm audit fix --audit-level=critical

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
